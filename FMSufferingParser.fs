// Implementation file for parser generated by fsyacc
module FMSufferingParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "FMSufferingParser.fsp"

open FMSufferingTypesAST

# 10 "FMSufferingParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | ASSIGN
  | SKIP
  | SEMICOLON
  | IF
  | FI
  | DO
  | OD
  | LBRAC
  | RBRAC
  | ARROW
  | EQUAL
  | NOT
  | LESSER
  | GREATER
  | AND
  | OR
  | TRUE
  | FALSE
  | EOF
  | SQBRAC
  | OROR
  | ANDAND
  | NOTEQUAL
  | GREATEREQUAL
  | LESSEREQUAL
  | NAME of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_ARROW
    | TOKEN_EQUAL
    | TOKEN_NOT
    | TOKEN_LESSER
    | TOKEN_GREATER
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_EOF
    | TOKEN_SQBRAC
    | TOKEN_OROR
    | TOKEN_ANDAND
    | TOKEN_NOTEQUAL
    | TOKEN_GREATEREQUAL
    | TOKEN_LESSEREQUAL
    | TOKEN_NAME
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_command
    | NONTERM_guardedCommand
    | NONTERM_arithExpr0
    | NONTERM_arithExpr1
    | NONTERM_arithExpr2
    | NONTERM_arithExpr3
    | NONTERM_boolExpr0
    | NONTERM_boolExpr1
    | NONTERM_boolExpr2
    | NONTERM_boolExpr3

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | ASSIGN  -> 7 
  | SKIP  -> 8 
  | SEMICOLON  -> 9 
  | IF  -> 10 
  | FI  -> 11 
  | DO  -> 12 
  | OD  -> 13 
  | LBRAC  -> 14 
  | RBRAC  -> 15 
  | ARROW  -> 16 
  | EQUAL  -> 17 
  | NOT  -> 18 
  | LESSER  -> 19 
  | GREATER  -> 20 
  | AND  -> 21 
  | OR  -> 22 
  | TRUE  -> 23 
  | FALSE  -> 24 
  | EOF  -> 25 
  | SQBRAC  -> 26 
  | OROR  -> 27 
  | ANDAND  -> 28 
  | NOTEQUAL  -> 29 
  | GREATEREQUAL  -> 30 
  | LESSEREQUAL  -> 31 
  | NAME _ -> 32 
  | NUM _ -> 33 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_ASSIGN 
  | 8 -> TOKEN_SKIP 
  | 9 -> TOKEN_SEMICOLON 
  | 10 -> TOKEN_IF 
  | 11 -> TOKEN_FI 
  | 12 -> TOKEN_DO 
  | 13 -> TOKEN_OD 
  | 14 -> TOKEN_LBRAC 
  | 15 -> TOKEN_RBRAC 
  | 16 -> TOKEN_ARROW 
  | 17 -> TOKEN_EQUAL 
  | 18 -> TOKEN_NOT 
  | 19 -> TOKEN_LESSER 
  | 20 -> TOKEN_GREATER 
  | 21 -> TOKEN_AND 
  | 22 -> TOKEN_OR 
  | 23 -> TOKEN_TRUE 
  | 24 -> TOKEN_FALSE 
  | 25 -> TOKEN_EOF 
  | 26 -> TOKEN_SQBRAC 
  | 27 -> TOKEN_OROR 
  | 28 -> TOKEN_ANDAND 
  | 29 -> TOKEN_NOTEQUAL 
  | 30 -> TOKEN_GREATEREQUAL 
  | 31 -> TOKEN_LESSEREQUAL 
  | 32 -> TOKEN_NAME 
  | 33 -> TOKEN_NUM 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_command 
    | 4 -> NONTERM_command 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_command 
    | 9 -> NONTERM_guardedCommand 
    | 10 -> NONTERM_guardedCommand 
    | 11 -> NONTERM_arithExpr0 
    | 12 -> NONTERM_arithExpr0 
    | 13 -> NONTERM_arithExpr0 
    | 14 -> NONTERM_arithExpr1 
    | 15 -> NONTERM_arithExpr1 
    | 16 -> NONTERM_arithExpr1 
    | 17 -> NONTERM_arithExpr2 
    | 18 -> NONTERM_arithExpr2 
    | 19 -> NONTERM_arithExpr3 
    | 20 -> NONTERM_arithExpr3 
    | 21 -> NONTERM_arithExpr3 
    | 22 -> NONTERM_arithExpr3 
    | 23 -> NONTERM_arithExpr3 
    | 24 -> NONTERM_boolExpr0 
    | 25 -> NONTERM_boolExpr0 
    | 26 -> NONTERM_boolExpr0 
    | 27 -> NONTERM_boolExpr1 
    | 28 -> NONTERM_boolExpr1 
    | 29 -> NONTERM_boolExpr1 
    | 30 -> NONTERM_boolExpr2 
    | 31 -> NONTERM_boolExpr2 
    | 32 -> NONTERM_boolExpr2 
    | 33 -> NONTERM_boolExpr2 
    | 34 -> NONTERM_boolExpr2 
    | 35 -> NONTERM_boolExpr2 
    | 36 -> NONTERM_boolExpr2 
    | 37 -> NONTERM_boolExpr3 
    | 38 -> NONTERM_boolExpr3 
    | 39 -> NONTERM_boolExpr3 
    | 40 -> NONTERM_boolExpr3 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | SEMICOLON  -> "SEMICOLON" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | LBRAC  -> "LBRAC" 
  | RBRAC  -> "RBRAC" 
  | ARROW  -> "ARROW" 
  | EQUAL  -> "EQUAL" 
  | NOT  -> "NOT" 
  | LESSER  -> "LESSER" 
  | GREATER  -> "GREATER" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | EOF  -> "EOF" 
  | SQBRAC  -> "SQBRAC" 
  | OROR  -> "OROR" 
  | ANDAND  -> "ANDAND" 
  | NOTEQUAL  -> "NOTEQUAL" 
  | GREATEREQUAL  -> "GREATEREQUAL" 
  | LESSEREQUAL  -> "LESSEREQUAL" 
  | NAME _ -> "NAME" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | LBRAC  -> (null : System.Object) 
  | RBRAC  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | LESSER  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SQBRAC  -> (null : System.Object) 
  | OROR  -> (null : System.Object) 
  | ANDAND  -> (null : System.Object) 
  | NOTEQUAL  -> (null : System.Object) 
  | GREATEREQUAL  -> (null : System.Object) 
  | LESSEREQUAL  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 21us; 19us; 29us; 20us; 3us; 65535us; 22us; 23us; 25us; 26us; 31us; 30us; 22us; 65535us; 0us; 35us; 8us; 9us; 10us; 12us; 11us; 13us; 16us; 17us; 22us; 35us; 25us; 35us; 31us; 35us; 59us; 32us; 61us; 33us; 62us; 34us; 65us; 35us; 67us; 35us; 70us; 35us; 72us; 35us; 75us; 36us; 76us; 37us; 77us; 38us; 78us; 39us; 79us; 40us; 80us; 41us; 86us; 35us; 24us; 65535us; 0us; 46us; 8us; 46us; 10us; 46us; 11us; 46us; 16us; 46us; 22us; 46us; 25us; 46us; 31us; 46us; 42us; 43us; 44us; 45us; 59us; 46us; 61us; 46us; 62us; 46us; 65us; 46us; 67us; 46us; 70us; 46us; 72us; 46us; 75us; 46us; 76us; 46us; 77us; 46us; 78us; 46us; 79us; 46us; 80us; 46us; 86us; 46us; 27us; 65535us; 0us; 51us; 8us; 51us; 10us; 51us; 11us; 51us; 16us; 51us; 22us; 51us; 25us; 51us; 31us; 51us; 42us; 51us; 44us; 51us; 47us; 48us; 49us; 50us; 53us; 54us; 59us; 51us; 61us; 51us; 62us; 51us; 65us; 51us; 67us; 51us; 70us; 51us; 72us; 51us; 75us; 51us; 76us; 51us; 77us; 51us; 78us; 51us; 79us; 51us; 80us; 51us; 86us; 51us; 28us; 65535us; 0us; 52us; 8us; 52us; 10us; 52us; 11us; 52us; 16us; 52us; 22us; 52us; 25us; 52us; 31us; 52us; 42us; 52us; 44us; 52us; 47us; 52us; 49us; 52us; 53us; 52us; 55us; 56us; 59us; 52us; 61us; 52us; 62us; 52us; 65us; 52us; 67us; 52us; 70us; 52us; 72us; 52us; 75us; 52us; 76us; 52us; 77us; 52us; 78us; 52us; 79us; 52us; 80us; 52us; 86us; 52us; 6us; 65535us; 0us; 4us; 22us; 28us; 25us; 28us; 31us; 28us; 62us; 64us; 86us; 64us; 8us; 65535us; 0us; 69us; 22us; 69us; 25us; 69us; 31us; 69us; 62us; 69us; 65us; 66us; 67us; 68us; 86us; 69us; 10us; 65535us; 0us; 74us; 22us; 74us; 25us; 74us; 31us; 74us; 62us; 74us; 65us; 74us; 67us; 74us; 70us; 71us; 72us; 73us; 86us; 74us; 11us; 65535us; 0us; 81us; 22us; 81us; 25us; 81us; 31us; 81us; 62us; 81us; 65us; 81us; 67us; 81us; 70us; 81us; 72us; 81us; 82us; 83us; 86us; 81us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 34us; 59us; 87us; 116us; 123us; 132us; 143us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 6us; 1us; 1us; 3us; 2us; 24us; 25us; 1us; 2us; 2us; 3us; 4us; 4us; 3us; 4us; 21us; 22us; 1us; 3us; 3us; 3us; 11us; 12us; 1us; 4us; 2us; 4us; 22us; 3us; 4us; 11us; 12us; 4us; 4us; 11us; 12us; 22us; 1us; 4us; 2us; 4us; 22us; 1us; 4us; 3us; 4us; 11us; 12us; 1us; 5us; 2us; 6us; 6us; 2us; 6us; 9us; 1us; 6us; 1us; 7us; 2us; 7us; 10us; 1us; 7us; 1us; 8us; 2us; 8us; 10us; 1us; 8us; 3us; 9us; 24us; 25us; 1us; 9us; 2us; 10us; 10us; 1us; 10us; 3us; 11us; 12us; 22us; 3us; 11us; 12us; 23us; 9us; 11us; 12us; 23us; 30us; 31us; 32us; 33us; 34us; 35us; 8us; 11us; 12us; 30us; 31us; 32us; 33us; 34us; 35us; 3us; 11us; 12us; 30us; 3us; 11us; 12us; 31us; 3us; 11us; 12us; 32us; 3us; 11us; 12us; 33us; 3us; 11us; 12us; 34us; 3us; 11us; 12us; 35us; 1us; 11us; 3us; 11us; 14us; 15us; 1us; 12us; 3us; 12us; 14us; 15us; 3us; 13us; 14us; 15us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 2us; 17us; 18us; 1us; 17us; 1us; 17us; 1us; 19us; 1us; 19us; 1us; 20us; 2us; 21us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 2us; 23us; 40us; 1us; 23us; 3us; 24us; 25us; 40us; 1us; 24us; 3us; 24us; 27us; 28us; 1us; 25us; 3us; 25us; 27us; 28us; 3us; 26us; 27us; 28us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 40us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 13us; 15us; 18us; 23us; 25us; 29us; 31us; 34us; 38us; 43us; 45us; 48us; 50us; 54us; 56us; 59us; 62us; 64us; 66us; 69us; 71us; 73us; 76us; 78us; 82us; 84us; 87us; 89us; 93us; 97us; 107us; 116us; 120us; 124us; 128us; 132us; 136us; 140us; 142us; 146us; 148us; 152us; 156us; 158us; 160us; 162us; 164us; 166us; 169us; 171us; 173us; 175us; 177us; 179us; 182us; 184us; 186us; 188us; 191us; 193us; 197us; 199us; 203us; 205us; 209us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; |]
let _fsyacc_action_rows = 88
let _fsyacc_actionTableElements = [|10us; 32768us; 3us; 55us; 5us; 62us; 8us; 18us; 10us; 22us; 12us; 25us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 7us; 33us; 57us; 0us; 49152us; 2us; 32768us; 9us; 21us; 25us; 3us; 0us; 16385us; 3us; 32768us; 22us; 65us; 25us; 5us; 27us; 67us; 0us; 16386us; 2us; 32768us; 7us; 8us; 14us; 10us; 2us; 16405us; 7us; 8us; 14us; 11us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 2us; 16387us; 2us; 42us; 3us; 44us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 3us; 32768us; 2us; 42us; 3us; 44us; 15us; 14us; 3us; 32768us; 2us; 42us; 3us; 44us; 15us; 15us; 1us; 32768us; 7us; 16us; 1us; 16406us; 7us; 16us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 2us; 16388us; 2us; 42us; 3us; 44us; 0us; 16389us; 1us; 16390us; 9us; 21us; 1us; 16393us; 9us; 21us; 4us; 32768us; 8us; 18us; 10us; 22us; 12us; 25us; 32us; 6us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 2us; 32768us; 11us; 24us; 26us; 31us; 0us; 16391us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 2us; 32768us; 13us; 27us; 26us; 31us; 0us; 16392us; 3us; 32768us; 16us; 29us; 22us; 65us; 27us; 67us; 4us; 32768us; 8us; 18us; 10us; 22us; 12us; 25us; 32us; 6us; 1us; 16394us; 26us; 31us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 3us; 32768us; 2us; 42us; 3us; 44us; 15us; 60us; 3us; 32768us; 2us; 42us; 3us; 44us; 6us; 63us; 9us; 32768us; 2us; 42us; 3us; 44us; 6us; 63us; 17us; 75us; 19us; 79us; 20us; 77us; 29us; 76us; 30us; 78us; 31us; 80us; 8us; 32768us; 2us; 42us; 3us; 44us; 17us; 75us; 19us; 79us; 20us; 77us; 29us; 76us; 30us; 78us; 31us; 80us; 2us; 16414us; 2us; 42us; 3us; 44us; 2us; 16415us; 2us; 42us; 3us; 44us; 2us; 16416us; 2us; 42us; 3us; 44us; 2us; 16417us; 2us; 42us; 3us; 44us; 2us; 16418us; 2us; 42us; 3us; 44us; 2us; 16419us; 2us; 42us; 3us; 44us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 2us; 16395us; 0us; 47us; 1us; 49us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 2us; 16396us; 0us; 47us; 1us; 49us; 2us; 16397us; 0us; 47us; 1us; 49us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 0us; 16398us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 0us; 16399us; 0us; 16400us; 1us; 16402us; 4us; 53us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 0us; 16401us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 0us; 16403us; 0us; 16404us; 1us; 16405us; 14us; 59us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 0us; 16406us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 0us; 16407us; 3us; 32768us; 6us; 87us; 22us; 65us; 27us; 67us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 2us; 16408us; 21us; 70us; 28us; 72us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 2us; 16409us; 21us; 70us; 28us; 72us; 2us; 16410us; 21us; 70us; 28us; 72us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 0us; 16411us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 0us; 16412us; 0us; 16413us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 4us; 32768us; 3us; 55us; 5us; 61us; 32us; 58us; 33us; 57us; 0us; 16420us; 4us; 32768us; 5us; 86us; 18us; 82us; 23us; 84us; 24us; 85us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 7us; 32768us; 3us; 55us; 5us; 62us; 18us; 82us; 23us; 84us; 24us; 85us; 32us; 58us; 33us; 57us; 0us; 16424us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 15us; 16us; 20us; 21us; 24us; 27us; 32us; 35us; 40us; 45us; 49us; 53us; 55us; 57us; 62us; 65us; 66us; 68us; 70us; 75us; 83us; 86us; 87us; 95us; 98us; 99us; 103us; 108us; 110us; 118us; 122us; 126us; 136us; 145us; 148us; 151us; 154us; 157us; 160us; 163us; 168us; 171us; 176us; 179us; 182us; 187us; 188us; 193us; 194us; 195us; 197us; 202us; 203us; 208us; 209us; 210us; 212us; 217us; 218us; 223us; 231us; 232us; 236us; 244us; 247us; 255us; 258us; 261us; 269us; 270us; 278us; 279us; 280us; 285us; 290us; 295us; 300us; 305us; 310us; 311us; 316us; 317us; 318us; 319us; 327us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 3us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 2us; 1us; 1us; 4us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 2us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 16399us; 16400us; 65535us; 65535us; 16401us; 65535us; 16403us; 16404us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 16412us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 16421us; 16422us; 16423us; 65535us; 16424us; |]
let _fsyacc_reductions ()  =    [| 
# 314 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : parserReturnType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 323 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "FMSufferingParser.fsp"
                                                   RCommand(_1) 
                   )
# 43 "FMSufferingParser.fsp"
                 : parserReturnType));
# 334 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "FMSufferingParser.fsp"
                                                   RBoolExpr(_1) 
                   )
# 44 "FMSufferingParser.fsp"
                 : parserReturnType));
# 345 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FMSufferingParser.fsp"
                                                                           Assign(_1,_3) 
                   )
# 61 "FMSufferingParser.fsp"
                 : command));
# 357 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "FMSufferingParser.fsp"
                                                                           AssignArray(_1,_3,_6) 
                   )
# 62 "FMSufferingParser.fsp"
                 : command));
# 370 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "FMSufferingParser.fsp"
                                                                           Skip 
                   )
# 63 "FMSufferingParser.fsp"
                 : command));
# 380 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "FMSufferingParser.fsp"
                                                                           CommandCommand(_1,_3) 
                   )
# 64 "FMSufferingParser.fsp"
                 : command));
# 392 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "FMSufferingParser.fsp"
                                                                           IfStatement(_2) 
                   )
# 65 "FMSufferingParser.fsp"
                 : command));
# 403 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FMSufferingParser.fsp"
                                                                           DoStatement(_2) 
                   )
# 66 "FMSufferingParser.fsp"
                 : command));
# 414 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "FMSufferingParser.fsp"
                                                                           Condition(_1,_3) 
                   )
# 69 "FMSufferingParser.fsp"
                 : guardedCommand));
# 426 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : guardedCommand)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : guardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "FMSufferingParser.fsp"
                                                                      Choice(_1,_3) 
                   )
# 70 "FMSufferingParser.fsp"
                 : guardedCommand));
# 438 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "FMSufferingParser.fsp"
                                                         PlusArithExpr(_1,_3) 
                   )
# 73 "FMSufferingParser.fsp"
                 : arithExpr));
# 450 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "FMSufferingParser.fsp"
                                                         MinusArithExpr(_1,_3) 
                   )
# 74 "FMSufferingParser.fsp"
                 : arithExpr));
# 462 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "FMSufferingParser.fsp"
                                                         _1 
                   )
# 75 "FMSufferingParser.fsp"
                 : arithExpr));
# 473 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FMSufferingParser.fsp"
                                                         TimesArithExpr(_1,_3) 
                   )
# 78 "FMSufferingParser.fsp"
                 : arithExpr));
# 485 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "FMSufferingParser.fsp"
                                                         DivArithExpr(_1,_3) 
                   )
# 79 "FMSufferingParser.fsp"
                 : arithExpr));
# 497 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "FMSufferingParser.fsp"
                                                         _1 
                   )
# 80 "FMSufferingParser.fsp"
                 : arithExpr));
# 508 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "FMSufferingParser.fsp"
                                                         PowArithExpr(_1,_3) 
                   )
# 83 "FMSufferingParser.fsp"
                 : arithExpr));
# 520 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "FMSufferingParser.fsp"
                                                         _1 
                   )
# 84 "FMSufferingParser.fsp"
                 : arithExpr));
# 531 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "FMSufferingParser.fsp"
                                                         UMinusArithExpr(_2) 
                   )
# 87 "FMSufferingParser.fsp"
                 : arithExpr));
# 542 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "FMSufferingParser.fsp"
                                                         Num(_1) 
                   )
# 88 "FMSufferingParser.fsp"
                 : arithExpr));
# 553 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "FMSufferingParser.fsp"
                                                         GetVariable(_1) 
                   )
# 89 "FMSufferingParser.fsp"
                 : arithExpr));
# 564 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "FMSufferingParser.fsp"
                                                         GetArrayItem(_1,_3) 
                   )
# 90 "FMSufferingParser.fsp"
                 : arithExpr));
# 576 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "FMSufferingParser.fsp"
                                                         _2 
                   )
# 91 "FMSufferingParser.fsp"
                 : arithExpr));
# 587 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "FMSufferingParser.fsp"
                                                         StrongOrExpr(_1,_3) 
                   )
# 94 "FMSufferingParser.fsp"
                 : boolExpr));
# 599 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "FMSufferingParser.fsp"
                                                         WeakOrExpr(_1,_3) 
                   )
# 95 "FMSufferingParser.fsp"
                 : boolExpr));
# 611 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "FMSufferingParser.fsp"
                                                         _1 
                   )
# 96 "FMSufferingParser.fsp"
                 : boolExpr));
# 622 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "FMSufferingParser.fsp"
                                                          StrongAndExpr(_1,_3) 
                   )
# 99 "FMSufferingParser.fsp"
                 : boolExpr));
# 634 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "FMSufferingParser.fsp"
                                                          WeakAndExpr(_1,_3) 
                   )
# 100 "FMSufferingParser.fsp"
                 : boolExpr));
# 646 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "FMSufferingParser.fsp"
                                                          _1 
                   )
# 101 "FMSufferingParser.fsp"
                 : boolExpr));
# 657 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "FMSufferingParser.fsp"
                                                               EqualExpr(_1,_3) 
                   )
# 104 "FMSufferingParser.fsp"
                 : boolExpr));
# 669 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "FMSufferingParser.fsp"
                                                              NotEqualExpr(_1,_3) 
                   )
# 105 "FMSufferingParser.fsp"
                 : boolExpr));
# 681 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "FMSufferingParser.fsp"
                                                               GreaterExpr(_1,_3) 
                   )
# 106 "FMSufferingParser.fsp"
                 : boolExpr));
# 693 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "FMSufferingParser.fsp"
                                                              GreaterEqualExpr(_1,_3) 
                   )
# 107 "FMSufferingParser.fsp"
                 : boolExpr));
# 705 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "FMSufferingParser.fsp"
                                                              LesserExpr(_1,_3) 
                   )
# 108 "FMSufferingParser.fsp"
                 : boolExpr));
# 717 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "FMSufferingParser.fsp"
                                                             LesserEqualExpr(_1,_3) 
                   )
# 109 "FMSufferingParser.fsp"
                 : boolExpr));
# 729 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "FMSufferingParser.fsp"
                                                               _1 
                   )
# 110 "FMSufferingParser.fsp"
                 : boolExpr));
# 740 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "FMSufferingParser.fsp"
                                                         NotExpr(_2) 
                   )
# 113 "FMSufferingParser.fsp"
                 : boolExpr));
# 751 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "FMSufferingParser.fsp"
                                                         True 
                   )
# 114 "FMSufferingParser.fsp"
                 : boolExpr));
# 761 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "FMSufferingParser.fsp"
                                                         False 
                   )
# 115 "FMSufferingParser.fsp"
                 : boolExpr));
# 771 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "FMSufferingParser.fsp"
                                                         _2 
                   )
# 116 "FMSufferingParser.fsp"
                 : boolExpr));
|]
# 783 "FMSufferingParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : parserReturnType =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
