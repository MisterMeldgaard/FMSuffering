// Implementation file for parser generated by fsyacc
module FMSufferingParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "FMSufferingParser.fsp"

open FMSufferingTypesAST

# 10 "FMSufferingParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | ASSIGN
  | SKIP
  | SEMICOLON
  | IF
  | FI
  | DO
  | OD
  | LBRAC
  | RBRAC
  | ARROW
  | EQUAL
  | NOT
  | LESSER
  | GREATER
  | AND
  | OR
  | TRUE
  | FALSE
  | EOF
  | SQBRAC
  | OROR
  | ANDAND
  | NOTEQUAL
  | GREATEREQUAL
  | LESSEREQUAL
  | BREAK
  | CONTINUE
  | NAME of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_LBRAC
    | TOKEN_RBRAC
    | TOKEN_ARROW
    | TOKEN_EQUAL
    | TOKEN_NOT
    | TOKEN_LESSER
    | TOKEN_GREATER
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_EOF
    | TOKEN_SQBRAC
    | TOKEN_OROR
    | TOKEN_ANDAND
    | TOKEN_NOTEQUAL
    | TOKEN_GREATEREQUAL
    | TOKEN_LESSEREQUAL
    | TOKEN_BREAK
    | TOKEN_CONTINUE
    | TOKEN_NAME
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_command
    | NONTERM_guardedCommand
    | NONTERM_arithExpr0
    | NONTERM_arithExpr1
    | NONTERM_arithExpr2
    | NONTERM_arithExpr3
    | NONTERM_boolExpr0
    | NONTERM_boolExpr1
    | NONTERM_boolExpr2
    | NONTERM_boolExpr3

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | ASSIGN  -> 7 
  | SKIP  -> 8 
  | SEMICOLON  -> 9 
  | IF  -> 10 
  | FI  -> 11 
  | DO  -> 12 
  | OD  -> 13 
  | LBRAC  -> 14 
  | RBRAC  -> 15 
  | ARROW  -> 16 
  | EQUAL  -> 17 
  | NOT  -> 18 
  | LESSER  -> 19 
  | GREATER  -> 20 
  | AND  -> 21 
  | OR  -> 22 
  | TRUE  -> 23 
  | FALSE  -> 24 
  | EOF  -> 25 
  | SQBRAC  -> 26 
  | OROR  -> 27 
  | ANDAND  -> 28 
  | NOTEQUAL  -> 29 
  | GREATEREQUAL  -> 30 
  | LESSEREQUAL  -> 31 
  | BREAK  -> 32 
  | CONTINUE  -> 33 
  | NAME _ -> 34 
  | NUM _ -> 35 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_ASSIGN 
  | 8 -> TOKEN_SKIP 
  | 9 -> TOKEN_SEMICOLON 
  | 10 -> TOKEN_IF 
  | 11 -> TOKEN_FI 
  | 12 -> TOKEN_DO 
  | 13 -> TOKEN_OD 
  | 14 -> TOKEN_LBRAC 
  | 15 -> TOKEN_RBRAC 
  | 16 -> TOKEN_ARROW 
  | 17 -> TOKEN_EQUAL 
  | 18 -> TOKEN_NOT 
  | 19 -> TOKEN_LESSER 
  | 20 -> TOKEN_GREATER 
  | 21 -> TOKEN_AND 
  | 22 -> TOKEN_OR 
  | 23 -> TOKEN_TRUE 
  | 24 -> TOKEN_FALSE 
  | 25 -> TOKEN_EOF 
  | 26 -> TOKEN_SQBRAC 
  | 27 -> TOKEN_OROR 
  | 28 -> TOKEN_ANDAND 
  | 29 -> TOKEN_NOTEQUAL 
  | 30 -> TOKEN_GREATEREQUAL 
  | 31 -> TOKEN_LESSEREQUAL 
  | 32 -> TOKEN_BREAK 
  | 33 -> TOKEN_CONTINUE 
  | 34 -> TOKEN_NAME 
  | 35 -> TOKEN_NUM 
  | 38 -> TOKEN_end_of_input
  | 36 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_command 
    | 3 -> NONTERM_command 
    | 4 -> NONTERM_command 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_command 
    | 9 -> NONTERM_command 
    | 10 -> NONTERM_guardedCommand 
    | 11 -> NONTERM_guardedCommand 
    | 12 -> NONTERM_arithExpr0 
    | 13 -> NONTERM_arithExpr0 
    | 14 -> NONTERM_arithExpr0 
    | 15 -> NONTERM_arithExpr1 
    | 16 -> NONTERM_arithExpr1 
    | 17 -> NONTERM_arithExpr1 
    | 18 -> NONTERM_arithExpr2 
    | 19 -> NONTERM_arithExpr2 
    | 20 -> NONTERM_arithExpr3 
    | 21 -> NONTERM_arithExpr3 
    | 22 -> NONTERM_arithExpr3 
    | 23 -> NONTERM_arithExpr3 
    | 24 -> NONTERM_arithExpr3 
    | 25 -> NONTERM_boolExpr0 
    | 26 -> NONTERM_boolExpr0 
    | 27 -> NONTERM_boolExpr0 
    | 28 -> NONTERM_boolExpr1 
    | 29 -> NONTERM_boolExpr1 
    | 30 -> NONTERM_boolExpr1 
    | 31 -> NONTERM_boolExpr2 
    | 32 -> NONTERM_boolExpr2 
    | 33 -> NONTERM_boolExpr2 
    | 34 -> NONTERM_boolExpr2 
    | 35 -> NONTERM_boolExpr2 
    | 36 -> NONTERM_boolExpr2 
    | 37 -> NONTERM_boolExpr2 
    | 38 -> NONTERM_boolExpr3 
    | 39 -> NONTERM_boolExpr3 
    | 40 -> NONTERM_boolExpr3 
    | 41 -> NONTERM_boolExpr3 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 38 
let _fsyacc_tagOfErrorTerminal = 36

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | SEMICOLON  -> "SEMICOLON" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | LBRAC  -> "LBRAC" 
  | RBRAC  -> "RBRAC" 
  | ARROW  -> "ARROW" 
  | EQUAL  -> "EQUAL" 
  | NOT  -> "NOT" 
  | LESSER  -> "LESSER" 
  | GREATER  -> "GREATER" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | EOF  -> "EOF" 
  | SQBRAC  -> "SQBRAC" 
  | OROR  -> "OROR" 
  | ANDAND  -> "ANDAND" 
  | NOTEQUAL  -> "NOTEQUAL" 
  | GREATEREQUAL  -> "GREATEREQUAL" 
  | LESSEREQUAL  -> "LESSEREQUAL" 
  | BREAK  -> "BREAK" 
  | CONTINUE  -> "CONTINUE" 
  | NAME _ -> "NAME" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | LBRAC  -> (null : System.Object) 
  | RBRAC  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | LESSER  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SQBRAC  -> (null : System.Object) 
  | OROR  -> (null : System.Object) 
  | ANDAND  -> (null : System.Object) 
  | NOTEQUAL  -> (null : System.Object) 
  | GREATEREQUAL  -> (null : System.Object) 
  | LESSEREQUAL  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | CONTINUE  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 17us; 15us; 25us; 16us; 3us; 65535us; 18us; 19us; 21us; 22us; 27us; 26us; 20us; 65535us; 5us; 6us; 7us; 8us; 10us; 11us; 18us; 31us; 21us; 31us; 27us; 31us; 55us; 28us; 57us; 29us; 58us; 30us; 61us; 31us; 63us; 31us; 66us; 31us; 68us; 31us; 71us; 32us; 72us; 33us; 73us; 34us; 74us; 35us; 75us; 36us; 76us; 37us; 82us; 31us; 22us; 65535us; 5us; 42us; 7us; 42us; 10us; 42us; 18us; 42us; 21us; 42us; 27us; 42us; 38us; 39us; 40us; 41us; 55us; 42us; 57us; 42us; 58us; 42us; 61us; 42us; 63us; 42us; 66us; 42us; 68us; 42us; 71us; 42us; 72us; 42us; 73us; 42us; 74us; 42us; 75us; 42us; 76us; 42us; 82us; 42us; 25us; 65535us; 5us; 47us; 7us; 47us; 10us; 47us; 18us; 47us; 21us; 47us; 27us; 47us; 38us; 47us; 40us; 47us; 43us; 44us; 45us; 46us; 49us; 50us; 55us; 47us; 57us; 47us; 58us; 47us; 61us; 47us; 63us; 47us; 66us; 47us; 68us; 47us; 71us; 47us; 72us; 47us; 73us; 47us; 74us; 47us; 75us; 47us; 76us; 47us; 82us; 47us; 26us; 65535us; 5us; 48us; 7us; 48us; 10us; 48us; 18us; 48us; 21us; 48us; 27us; 48us; 38us; 48us; 40us; 48us; 43us; 48us; 45us; 48us; 49us; 48us; 51us; 52us; 55us; 48us; 57us; 48us; 58us; 48us; 61us; 48us; 63us; 48us; 66us; 48us; 68us; 48us; 71us; 48us; 72us; 48us; 73us; 48us; 74us; 48us; 75us; 48us; 76us; 48us; 82us; 48us; 5us; 65535us; 18us; 24us; 21us; 24us; 27us; 24us; 58us; 60us; 82us; 60us; 7us; 65535us; 18us; 65us; 21us; 65us; 27us; 65us; 58us; 65us; 61us; 62us; 63us; 64us; 82us; 65us; 9us; 65535us; 18us; 70us; 21us; 70us; 27us; 70us; 58us; 70us; 61us; 70us; 63us; 70us; 66us; 67us; 68us; 69us; 82us; 70us; 10us; 65535us; 18us; 77us; 21us; 77us; 27us; 77us; 58us; 77us; 61us; 77us; 63us; 77us; 66us; 77us; 68us; 77us; 78us; 79us; 82us; 77us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 32us; 55us; 81us; 108us; 114us; 122us; 132us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 7us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 3us; 2us; 12us; 13us; 1us; 3us; 3us; 3us; 12us; 13us; 1us; 3us; 1us; 3us; 3us; 3us; 12us; 13us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 7us; 7us; 2us; 7us; 10us; 1us; 7us; 1us; 8us; 2us; 8us; 11us; 1us; 8us; 1us; 9us; 2us; 9us; 11us; 1us; 9us; 3us; 10us; 25us; 26us; 1us; 10us; 2us; 11us; 11us; 1us; 11us; 3us; 12us; 13us; 23us; 3us; 12us; 13us; 24us; 9us; 12us; 13us; 24us; 31us; 32us; 33us; 34us; 35us; 36us; 8us; 12us; 13us; 31us; 32us; 33us; 34us; 35us; 36us; 3us; 12us; 13us; 31us; 3us; 12us; 13us; 32us; 3us; 12us; 13us; 33us; 3us; 12us; 13us; 34us; 3us; 12us; 13us; 35us; 3us; 12us; 13us; 36us; 1us; 12us; 3us; 12us; 15us; 16us; 1us; 13us; 3us; 13us; 15us; 16us; 3us; 14us; 15us; 16us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 2us; 18us; 19us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 2us; 22us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 2us; 24us; 41us; 1us; 24us; 3us; 25us; 26us; 41us; 1us; 25us; 3us; 25us; 28us; 29us; 1us; 26us; 3us; 26us; 28us; 29us; 3us; 27us; 28us; 29us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 41us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 12us; 14us; 18us; 20us; 24us; 26us; 28us; 32us; 34us; 36us; 38us; 41us; 44us; 46us; 48us; 51us; 53us; 55us; 58us; 60us; 64us; 66us; 69us; 71us; 75us; 79us; 89us; 98us; 102us; 106us; 110us; 114us; 118us; 122us; 124us; 128us; 130us; 134us; 138us; 140us; 142us; 144us; 146us; 148us; 151us; 153us; 155us; 157us; 159us; 161us; 164us; 166us; 168us; 170us; 173us; 175us; 179us; 181us; 185us; 187us; 191us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; |]
let _fsyacc_action_rows = 84
let _fsyacc_actionTableElements = [|6us; 32768us; 8us; 12us; 10us; 18us; 12us; 21us; 32us; 13us; 33us; 14us; 34us; 4us; 0us; 49152us; 2us; 32768us; 9us; 17us; 25us; 3us; 0us; 16385us; 2us; 32768us; 7us; 5us; 14us; 7us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 2us; 16386us; 2us; 38us; 3us; 40us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 3us; 32768us; 2us; 38us; 3us; 40us; 15us; 9us; 1us; 32768us; 7us; 10us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 2us; 16387us; 2us; 38us; 3us; 40us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 16391us; 9us; 17us; 1us; 16394us; 9us; 17us; 6us; 32768us; 8us; 12us; 10us; 18us; 12us; 21us; 32us; 13us; 33us; 14us; 34us; 4us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 2us; 32768us; 11us; 20us; 26us; 27us; 0us; 16392us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 2us; 32768us; 13us; 23us; 26us; 27us; 0us; 16393us; 3us; 32768us; 16us; 25us; 22us; 61us; 27us; 63us; 6us; 32768us; 8us; 12us; 10us; 18us; 12us; 21us; 32us; 13us; 33us; 14us; 34us; 4us; 1us; 16395us; 26us; 27us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 3us; 32768us; 2us; 38us; 3us; 40us; 15us; 56us; 3us; 32768us; 2us; 38us; 3us; 40us; 6us; 59us; 9us; 32768us; 2us; 38us; 3us; 40us; 6us; 59us; 17us; 71us; 19us; 75us; 20us; 73us; 29us; 72us; 30us; 74us; 31us; 76us; 8us; 32768us; 2us; 38us; 3us; 40us; 17us; 71us; 19us; 75us; 20us; 73us; 29us; 72us; 30us; 74us; 31us; 76us; 2us; 16415us; 2us; 38us; 3us; 40us; 2us; 16416us; 2us; 38us; 3us; 40us; 2us; 16417us; 2us; 38us; 3us; 40us; 2us; 16418us; 2us; 38us; 3us; 40us; 2us; 16419us; 2us; 38us; 3us; 40us; 2us; 16420us; 2us; 38us; 3us; 40us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 2us; 16396us; 0us; 43us; 1us; 45us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 2us; 16397us; 0us; 43us; 1us; 45us; 2us; 16398us; 0us; 43us; 1us; 45us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 0us; 16399us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 0us; 16400us; 0us; 16401us; 1us; 16403us; 4us; 49us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 0us; 16402us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 0us; 16404us; 0us; 16405us; 1us; 16406us; 14us; 55us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 0us; 16407us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 0us; 16408us; 3us; 32768us; 6us; 83us; 22us; 61us; 27us; 63us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 2us; 16409us; 21us; 66us; 28us; 68us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 2us; 16410us; 21us; 66us; 28us; 68us; 2us; 16411us; 21us; 66us; 28us; 68us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 0us; 16412us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 0us; 16413us; 0us; 16414us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 4us; 32768us; 3us; 51us; 5us; 57us; 34us; 54us; 35us; 53us; 0us; 16421us; 4us; 32768us; 5us; 82us; 18us; 78us; 23us; 80us; 24us; 81us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 7us; 32768us; 3us; 51us; 5us; 58us; 18us; 78us; 23us; 80us; 24us; 81us; 34us; 54us; 35us; 53us; 0us; 16425us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 7us; 8us; 11us; 12us; 15us; 20us; 23us; 28us; 32us; 34us; 39us; 42us; 43us; 44us; 45us; 47us; 49us; 56us; 64us; 67us; 68us; 76us; 79us; 80us; 84us; 91us; 93us; 101us; 105us; 109us; 119us; 128us; 131us; 134us; 137us; 140us; 143us; 146us; 151us; 154us; 159us; 162us; 165us; 170us; 171us; 176us; 177us; 178us; 180us; 185us; 186us; 191us; 192us; 193us; 195us; 200us; 201us; 206us; 214us; 215us; 219us; 227us; 230us; 238us; 241us; 244us; 252us; 253us; 261us; 262us; 263us; 268us; 273us; 278us; 283us; 288us; 293us; 294us; 299us; 300us; 301us; 302us; 310us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 6us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 2us; 1us; 1us; 4us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 2us; 1us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 16400us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 16405us; 65535us; 65535us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 16413us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 16422us; 16423us; 16424us; 65535us; 16425us; |]
let _fsyacc_reductions ()  =    [| 
# 327 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 336 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "FMSufferingParser.fsp"
                                                      _1 
                   )
# 42 "FMSufferingParser.fsp"
                 : command));
# 347 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "FMSufferingParser.fsp"
                                                                           Assign(_1,_3) 
                   )
# 59 "FMSufferingParser.fsp"
                 : command));
# 359 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "FMSufferingParser.fsp"
                                                                           AssignArray(_1,_3,_6) 
                   )
# 60 "FMSufferingParser.fsp"
                 : command));
# 372 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FMSufferingParser.fsp"
                                                                           Skip 
                   )
# 61 "FMSufferingParser.fsp"
                 : command));
# 382 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "FMSufferingParser.fsp"
                                                                           Break 
                   )
# 62 "FMSufferingParser.fsp"
                 : command));
# 392 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "FMSufferingParser.fsp"
                                                                           Continue 
                   )
# 63 "FMSufferingParser.fsp"
                 : command));
# 402 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "FMSufferingParser.fsp"
                                                                           CommandCommand(_1,_3) 
                   )
# 64 "FMSufferingParser.fsp"
                 : command));
# 414 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "FMSufferingParser.fsp"
                                                                           IfStatement(_2) 
                   )
# 65 "FMSufferingParser.fsp"
                 : command));
# 425 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FMSufferingParser.fsp"
                                                                           DoStatement(_2) 
                   )
# 66 "FMSufferingParser.fsp"
                 : command));
# 436 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "FMSufferingParser.fsp"
                                                                           Condition(_1,_3) 
                   )
# 69 "FMSufferingParser.fsp"
                 : guardedCommand));
# 448 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : guardedCommand)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : guardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "FMSufferingParser.fsp"
                                                                      Choice(_1,_3) 
                   )
# 70 "FMSufferingParser.fsp"
                 : guardedCommand));
# 460 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "FMSufferingParser.fsp"
                                                         PlusArithExpr(_1,_3) 
                   )
# 73 "FMSufferingParser.fsp"
                 : arithExpr));
# 472 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "FMSufferingParser.fsp"
                                                         MinusArithExpr(_1,_3) 
                   )
# 74 "FMSufferingParser.fsp"
                 : arithExpr));
# 484 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "FMSufferingParser.fsp"
                                                         _1 
                   )
# 75 "FMSufferingParser.fsp"
                 : arithExpr));
# 495 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FMSufferingParser.fsp"
                                                         TimesArithExpr(_1,_3) 
                   )
# 78 "FMSufferingParser.fsp"
                 : arithExpr));
# 507 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "FMSufferingParser.fsp"
                                                         DivArithExpr(_1,_3) 
                   )
# 79 "FMSufferingParser.fsp"
                 : arithExpr));
# 519 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "FMSufferingParser.fsp"
                                                         _1 
                   )
# 80 "FMSufferingParser.fsp"
                 : arithExpr));
# 530 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "FMSufferingParser.fsp"
                                                         PowArithExpr(_1,_3) 
                   )
# 83 "FMSufferingParser.fsp"
                 : arithExpr));
# 542 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "FMSufferingParser.fsp"
                                                         _1 
                   )
# 84 "FMSufferingParser.fsp"
                 : arithExpr));
# 553 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "FMSufferingParser.fsp"
                                                         UMinusArithExpr(_2) 
                   )
# 87 "FMSufferingParser.fsp"
                 : arithExpr));
# 564 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "FMSufferingParser.fsp"
                                                         Num(_1) 
                   )
# 88 "FMSufferingParser.fsp"
                 : arithExpr));
# 575 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "FMSufferingParser.fsp"
                                                         GetVariable(_1) 
                   )
# 89 "FMSufferingParser.fsp"
                 : arithExpr));
# 586 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "FMSufferingParser.fsp"
                                                         GetArrayItem(_1,_3) 
                   )
# 90 "FMSufferingParser.fsp"
                 : arithExpr));
# 598 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "FMSufferingParser.fsp"
                                                         _2 
                   )
# 91 "FMSufferingParser.fsp"
                 : arithExpr));
# 609 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "FMSufferingParser.fsp"
                                                         StrongOrExpr(_1,_3) 
                   )
# 94 "FMSufferingParser.fsp"
                 : boolExpr));
# 621 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "FMSufferingParser.fsp"
                                                         WeakOrExpr(_1,_3) 
                   )
# 95 "FMSufferingParser.fsp"
                 : boolExpr));
# 633 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "FMSufferingParser.fsp"
                                                         _1 
                   )
# 96 "FMSufferingParser.fsp"
                 : boolExpr));
# 644 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "FMSufferingParser.fsp"
                                                          StrongAndExpr(_1,_3) 
                   )
# 99 "FMSufferingParser.fsp"
                 : boolExpr));
# 656 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "FMSufferingParser.fsp"
                                                          WeakAndExpr(_1,_3) 
                   )
# 100 "FMSufferingParser.fsp"
                 : boolExpr));
# 668 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "FMSufferingParser.fsp"
                                                          _1 
                   )
# 101 "FMSufferingParser.fsp"
                 : boolExpr));
# 679 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "FMSufferingParser.fsp"
                                                               EqualExpr(_1,_3) 
                   )
# 104 "FMSufferingParser.fsp"
                 : boolExpr));
# 691 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "FMSufferingParser.fsp"
                                                              NotEqualExpr(_1,_3) 
                   )
# 105 "FMSufferingParser.fsp"
                 : boolExpr));
# 703 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "FMSufferingParser.fsp"
                                                               GreaterExpr(_1,_3) 
                   )
# 106 "FMSufferingParser.fsp"
                 : boolExpr));
# 715 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "FMSufferingParser.fsp"
                                                              GreaterEqualExpr(_1,_3) 
                   )
# 107 "FMSufferingParser.fsp"
                 : boolExpr));
# 727 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "FMSufferingParser.fsp"
                                                              LesserExpr(_1,_3) 
                   )
# 108 "FMSufferingParser.fsp"
                 : boolExpr));
# 739 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "FMSufferingParser.fsp"
                                                             LesserEqualExpr(_1,_3) 
                   )
# 109 "FMSufferingParser.fsp"
                 : boolExpr));
# 751 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "FMSufferingParser.fsp"
                                                               _1 
                   )
# 110 "FMSufferingParser.fsp"
                 : boolExpr));
# 762 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "FMSufferingParser.fsp"
                                                         NotExpr(_2) 
                   )
# 113 "FMSufferingParser.fsp"
                 : boolExpr));
# 773 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "FMSufferingParser.fsp"
                                                         True 
                   )
# 114 "FMSufferingParser.fsp"
                 : boolExpr));
# 783 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "FMSufferingParser.fsp"
                                                         False 
                   )
# 115 "FMSufferingParser.fsp"
                 : boolExpr));
# 793 "FMSufferingParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "FMSufferingParser.fsp"
                                                         _2 
                   )
# 116 "FMSufferingParser.fsp"
                 : boolExpr));
|]
# 805 "FMSufferingParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 39;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : command =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
